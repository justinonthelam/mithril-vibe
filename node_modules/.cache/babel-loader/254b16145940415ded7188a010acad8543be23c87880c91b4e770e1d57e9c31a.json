{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useSaveState = ({\n  routine,\n  onRoutineChange\n}) => {\n  _s();\n  const [isDirty, setIsDirty] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [lastSaved, setLastSaved] = useState(null);\n  const [error, setError] = useState(null);\n\n  // Load routine from local storage on mount\n  useEffect(() => {\n    try {\n      const savedRoutine = localStorage.getItem('workout-routine');\n      if (savedRoutine) {\n        onRoutineChange(JSON.parse(savedRoutine));\n        setIsDirty(false);\n      }\n    } catch (err) {\n      setError('Failed to load routine from local storage');\n    }\n  }, [onRoutineChange]);\n\n  // Save routine to local storage\n  const saveRoutine = () => {\n    if (!isDirty) return;\n    setIsSaving(true);\n    setError(null);\n    setTimeout(() => {\n      try {\n        localStorage.setItem('workout-routine', JSON.stringify(routine));\n        setLastSaved(new Date());\n        setIsDirty(false);\n      } catch (err) {\n        setError('Failed to save routine to local storage');\n      } finally {\n        setIsSaving(false);\n      }\n    }, 1000); // Simulate network delay\n  };\n\n  // Mark as dirty when routine changes\n  useEffect(() => {\n    setIsDirty(true);\n  }, [routine]);\n\n  // Add keyboard shortcut for saving\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if ((event.metaKey || event.ctrlKey) && event.key === 'Enter') {\n        saveRoutine();\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [routine]);\n  return {\n    isDirty,\n    isSaving,\n    lastSaved,\n    error,\n    saveRoutine,\n    loadRoutine: () => {}\n  };\n};\n_s(useSaveState, \"c+xwCeJL21m9/LXHQX70lMt/RAk=\");","map":{"version":3,"names":["useState","useEffect","useSaveState","routine","onRoutineChange","_s","isDirty","setIsDirty","isSaving","setIsSaving","lastSaved","setLastSaved","error","setError","savedRoutine","localStorage","getItem","JSON","parse","err","saveRoutine","setTimeout","setItem","stringify","Date","handleKeyDown","event","metaKey","ctrlKey","key","window","addEventListener","removeEventListener","loadRoutine"],"sources":["/Users/justin/Documents/dev/mithril/src/hooks/useSaveState.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Routine, SaveState } from '../types/routine';\n\ninterface UseSaveStateProps {\n  routine: Routine;\n  onRoutineChange: (routine: Routine) => void;\n}\n\ntype UseSaveStateReturn = SaveState & {\n  saveRoutine: () => void;\n  loadRoutine: () => void;\n};\n\nexport const useSaveState = ({\n  routine,\n  onRoutineChange\n}: UseSaveStateProps): UseSaveStateReturn => {\n  const [isDirty, setIsDirty] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  // Load routine from local storage on mount\n  useEffect(() => {\n    try {\n      const savedRoutine = localStorage.getItem('workout-routine');\n      if (savedRoutine) {\n        onRoutineChange(JSON.parse(savedRoutine));\n        setIsDirty(false);\n      }\n    } catch (err) {\n      setError('Failed to load routine from local storage');\n    }\n  }, [onRoutineChange]);\n\n  // Save routine to local storage\n  const saveRoutine = () => {\n    if (!isDirty) return;\n\n    setIsSaving(true);\n    setError(null);\n\n    setTimeout(() => {\n      try {\n        localStorage.setItem('workout-routine', JSON.stringify(routine));\n        setLastSaved(new Date());\n        setIsDirty(false);\n      } catch (err) {\n        setError('Failed to save routine to local storage');\n      } finally {\n        setIsSaving(false);\n      }\n    }, 1000); // Simulate network delay\n  };\n\n  // Mark as dirty when routine changes\n  useEffect(() => {\n    setIsDirty(true);\n  }, [routine]);\n\n  // Add keyboard shortcut for saving\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if ((event.metaKey || event.ctrlKey) && event.key === 'Enter') {\n        saveRoutine();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [routine]);\n\n  return {\n    isDirty,\n    isSaving,\n    lastSaved,\n    error,\n    saveRoutine,\n    loadRoutine: () => {}\n  };\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAa3C,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAC3BC,OAAO;EACPC;AACiB,CAAC,KAAyB;EAAAC,EAAA;EAC3C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAc,IAAI,CAAC;EAC7D,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAgB,IAAI,CAAC;;EAEvD;EACAC,SAAS,CAAC,MAAM;IACd,IAAI;MACF,MAAMa,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;MAC5D,IAAIF,YAAY,EAAE;QAChBV,eAAe,CAACa,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC,CAAC;QACzCP,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,CAAC,OAAOY,GAAG,EAAE;MACZN,QAAQ,CAAC,2CAA2C,CAAC;IACvD;EACF,CAAC,EAAE,CAACT,eAAe,CAAC,CAAC;;EAErB;EACA,MAAMgB,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAACd,OAAO,EAAE;IAEdG,WAAW,CAAC,IAAI,CAAC;IACjBI,QAAQ,CAAC,IAAI,CAAC;IAEdQ,UAAU,CAAC,MAAM;MACf,IAAI;QACFN,YAAY,CAACO,OAAO,CAAC,iBAAiB,EAAEL,IAAI,CAACM,SAAS,CAACpB,OAAO,CAAC,CAAC;QAChEQ,YAAY,CAAC,IAAIa,IAAI,CAAC,CAAC,CAAC;QACxBjB,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOY,GAAG,EAAE;QACZN,QAAQ,CAAC,yCAAyC,CAAC;MACrD,CAAC,SAAS;QACRJ,WAAW,CAAC,KAAK,CAAC;MACpB;IACF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC;;EAED;EACAR,SAAS,CAAC,MAAM;IACdM,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC,EAAE,CAACJ,OAAO,CAAC,CAAC;;EAEb;EACAF,SAAS,CAAC,MAAM;IACd,MAAMwB,aAAa,GAAIC,KAAoB,IAAK;MAC9C,IAAI,CAACA,KAAK,CAACC,OAAO,IAAID,KAAK,CAACE,OAAO,KAAKF,KAAK,CAACG,GAAG,KAAK,OAAO,EAAE;QAC7DT,WAAW,CAAC,CAAC;MACf;IACF,CAAC;IAEDU,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEN,aAAa,CAAC;IACjD,OAAO,MAAMK,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEP,aAAa,CAAC;EACnE,CAAC,EAAE,CAACtB,OAAO,CAAC,CAAC;EAEb,OAAO;IACLG,OAAO;IACPE,QAAQ;IACRE,SAAS;IACTE,KAAK;IACLQ,WAAW;IACXa,WAAW,EAAEA,CAAA,KAAM,CAAC;EACtB,CAAC;AACH,CAAC;AAAC5B,EAAA,CAnEWH,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}